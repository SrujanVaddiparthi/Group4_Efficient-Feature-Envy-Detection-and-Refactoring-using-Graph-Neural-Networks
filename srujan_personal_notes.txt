1st Slide: Intro & Background
- # Efficient Feature Envy Detection and Refactoring Based on Graph Neural Network

- Keywords:
    - Technical Debt(TD): the implied cost of additional work in the future resulting from 
    choosing an expedient solution over a more robust one in software development.
    - Code smell: serious form of TD which is confusing, complex, or harmful design patters 
    in source code
    - Feature Envy: most common code smell. Refers to a method that is more interested in an 
    external class than its enclosing class. Misplaced method. 
    - SMOTE Call Graph (SCG): a GNN based approach to address the problems of detecting and 
    refactoring feature envy.
    - Calling Strength: is a concept that quantifies the strength of method invocations in the 
    call graph
    - Symmetric Feature Fusion Learning (SFFL): Obtains graphical representations of methods-classes. 
    Another approach to address the problems of detecting and refactoring feature envy. 
    - Invocation: number of times method is called
    - Ownership: the class which the method belongs to
    - Position: where the method is located in the code.
    - Coupling: a class A is coupled with class B if A affects B and vice versa.

    
- Introduction and Background:
    Feature Envy, the most common type of code smell, which is a form of TD,
        - reduces the cohesion of its own class
        - increases the coupling between classes. It's always better to have 
        less coupling.
    Best way to Handle it: 
        Move the feature envy method to the class from which it calls too many
        methods from.


2nd Slide onwards: Open Investigation

- Existing Studies:
    - Identified that feature envy is present in all long methods and god classes.
        Long Method- A Method that does too many tasks and is excessively long.
        God Class - A Class that takes on too many responsibility.
        Hence, it points out a major problem that needs to be detected, and gives clues 
        to develop processes to refactor it.
    - Existing approaches fail to exploit the fundamental method call relationships.  
        - They manually designed expressions to convert the method invocation information 
        into distances, which results in bad detection performance.
        - The input format used is not good enough to identify related samples, for example:
            - Method - Class relationships could help in identifying related samples.
        Hence, it leads to poor refactoring capability.
    
- Limitations, 
    - Method invocation relationship is not given much significance in detecting feature envy,
    which can be very important for a project.  

- Problem statement & the Proposed solution:
    Problem Statement: How to detect and refactor Feature Envy by improving upon existing methods?
    Focuses on method-class relationships.
    - The current solution introduces a new approach named SFFL that is based on the 
    reconstruction of method-class ownership heterogeneous graph.  
    They introduce 2 processes:
    - SMOTE Call Graph (SCG): It is a GNN based approach to address the problems of detecting and 
    refactoring feature envy.
        - SCG formulates the detection task as a node binary classification problem on the method call graph:
            - Calling Strength as a concept is introduced to quantify the strength of method invocations in 
            call graph.
            - It builds upon the existing studiesby converting the method call graph to a method-class call graph 
            representation.  
            - Recommends moving the smelly method (feature envy method) to the external class 
            with the highest calling strength.
    - Symmetric Feature Fusion Learning (SFFL): addresses the feature envy refactoring problem.
        - Collects the follwoing details from a project:
            - Invocation: indicates which method calls which one
            - Ownership: indicates which method belongs to which class
            - Position: where the methods is located in the code
            - Semantic information
        - Encodes them into four directed heterogeneous graphs, where the:
            - Nodes are methods and classes
            - Edges are invocation or ownership relationship between them.
        - Hence, SFFL introduces a link prediction to generate adjacency matrix representing 
        ownership relationships between methods and classes.
    Why are two methods used?:
        - both the methods complement each other.
        - SFFL exhibits better detection and refactoring performance than SCG.
        - The detection performance of SCG is superior to SFFL when the training samples
        are extremely imbalanced.
  


- What we aim to accomplish?
    We aim to duplicate the paper's results by the end of this project.

    
